{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport pino from 'pino';\nimport swaggerUi from 'swagger-ui-express';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport jwt from 'jsonwebtoken';\nimport { createClient } from '@supabase/supabase-js';\n\n// Logger\nconst logger = pino({ transport: process.env.NODE_ENV !== 'production' ? { target: 'pino-pretty' } : undefined });\n\n// Env\nconst PORT = Number(process.env.PORT || 4000);\nconst CORS_ORIGINS = (process.env.CORS_ORIGINS || '').split(',').map(s => s.trim()).filter(Boolean);\nconst SUPABASE_URL = process.env.SUPABASE_URL as string;\nconst SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY as string;\nconst ADMIN_JWT_SECRET = process.env.ADMIN_JWT_SECRET as string;\n\nif (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {\n  logger.warn('Supabase admin env not set. Set SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY.');\n}\nif (!ADMIN_JWT_SECRET) {\n  logger.warn('ADMIN_JWT_SECRET is not set. Admin auth will fail.');\n}\n\n// Supabase admin client\nexport const supabaseAdmin = createClient(SUPABASE_URL || '', SUPABASE_SERVICE_ROLE_KEY || '', {\n  auth: { persistSession: false, autoRefreshToken: false },\n});\n\n// Swagger setup\nconst swaggerSpec = swaggerJSDoc({\n  definition: {\n    openapi: '3.0.3',\n    info: {\n      title: 'LinguaLink Admin API',\n      version: '1.0.0',\n      description: 'Admin API for LinguaLink platform management including user moderation, role management, and analytics'\n    },\n    servers: [{ url: `http://localhost:${PORT}` }],\n    components: {\n      securitySchemes: {\n        bearerAuth: { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },\n      },\n      schemas: {\n        User: {\n          type: 'object',\n          properties: {\n            id: { type: 'string', format: 'uuid' },\n            username: { type: 'string' },\n            email: { type: 'string', format: 'email' },\n            country: { type: 'string' },\n            state: { type: 'string' },\n            city: { type: 'string' },\n            lga: { type: 'string' },\n            created_at: { type: 'string', format: 'date-time' },\n            updated_at: { type: 'string', format: 'date-time' },\n            referral_code: { type: 'string' },\n            is_banned: { type: 'boolean' },\n            admin_roles: { type: 'array', items: { type: 'string' } },\n            language_roles: { type: 'object' },\n            referral_count: { type: 'integer' }\n          }\n        },\n        Pagination: {\n          type: 'object',\n          properties: {\n            page: { type: 'integer' },\n            limit: { type: 'integer' },\n            total: { type: 'integer' },\n            pages: { type: 'integer' }\n          }\n        },\n        AdminAction: {\n          type: 'object',\n          properties: {\n            id: { type: 'string', format: 'uuid' },\n            admin_id: { type: 'string', format: 'uuid' },\n            action: { type: 'string' },\n            target_user_id: { type: 'string', format: 'uuid' },\n            details: { type: 'object' },\n            created_at: { type: 'string', format: 'date-time' }\n          }\n        }\n      }\n    },\n    security: [{ bearerAuth: [] }],\n  },\n  apis: ['./src/index.ts'],\n});\n\n// Express app\nconst app = express();\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(helmet());\napp.use(cors({ origin: CORS_ORIGINS.length ? CORS_ORIGINS : true }));\napp.set('trust proxy', 1);\n\n// Rate limiter\nconst limiter = rateLimit({ windowMs: 60_000, max: 120 });\napp.use(limiter);\n\n// Stricter limiter for public waitlist endpoint\nconst waitlistLimiter = rateLimit({ windowMs: 60_000, max: 10 });\n\n/**\n * @swagger\n * /health:\n *   get:\n *     summary: Health check endpoint\n *     description: Returns the health status of the API\n *     tags: [System]\n *     responses:\n *       200:\n *         description: API is healthy\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 ok:\n *                   type: boolean\n *                 uptime:\n *                   type: number\n */\napp.get('/health', (_req, res) => {\n  res.json({ ok: true, uptime: process.uptime() });\n});\n\n// Swagger UI (protect in prod if desired)\napp.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n// ===== PUBLIC WAITLIST ENDPOINT =====\n/**\n * @swagger\n * /waitlist:\n *   post:\n *     summary: Join waitlist\n *     tags: [System]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required: [email, phoneNumber, language]\n *             properties:\n *               email:\n *                 type: string\n *                 format: email\n *               phoneNumber:\n *                 type: string\n *               language:\n *                 type: string\n *     responses:\n *       200:\n *         description: Added to waitlist\n *       400:\n *         description: Validation error\n */\napp.post('/waitlist', waitlistLimiter, async (req, res) => {\n  try {\n    const rawEmail = String((req.body?.email || '')).trim().toLowerCase();\n    const rawPhone = String((req.body?.phoneNumber || '')).trim();\n    const language = String((req.body?.language || '')).trim();\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!rawEmail || !emailRegex.test(rawEmail)) {\n      return res.status(400).json({ error: 'Valid email is required' });\n    }\n    if (!rawPhone) {\n      return res.status(400).json({ error: 'Phone number is required' });\n    }\n    if (!language) {\n      return res.status(400).json({ error: 'Language is required' });\n    }\n\n    // Basic E.164 normalization attempt (keep + and digits)\n    const phoneNumber = rawPhone.replace(/[^+\\d]/g, '');\n\n    const { error } = await supabaseAdmin\n      .from('waitlist')\n      .insert({ email: rawEmail, phone_number: phoneNumber, language });\n\n    if (error) {\n      // Unique violation => already on waitlist is OK UX-wise\n      const already = error.message?.toLowerCase().includes('duplicate');\n      if (already) {\n        return res.json({ message: 'Already on waitlist' });\n      }\n      logger.error({ err: error }, 'Error inserting waitlist');\n      return res.status(500).json({ error: 'Failed to add to waitlist' });\n    }\n\n    res.json({ message: 'Added to waitlist' });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /waitlist');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Admin guard middleware\nfunction adminGuard(req: express.Request, res: express.Response, next: express.NextFunction) {\n  try {\n    const header = req.headers.authorization || '';\n    const token = header.startsWith('Bearer ') ? header.slice(7) : undefined;\n    if (!token) return res.status(401).json({ error: 'Missing token' });\n    const payload = jwt.verify(token, ADMIN_JWT_SECRET) as { sub?: string; role?: string };\n    if (!payload || (payload.role !== 'admin' && payload.role !== 'superadmin')) {\n      return res.status(403).json({ error: 'Forbidden' });\n    }\n    (req as any).admin = payload;\n    next();\n  } catch (e: any) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n}\n\n// ===== USER MANAGEMENT ENDPOINTS =====\n\n/**\n * @swagger\n * /admin/users:\n *   get:\n *     summary: Get all users with filters\n *     description: Retrieve a paginated list of users with optional filtering\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           default: 1\n *         description: Page number\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           default: 20\n *         description: Number of users per page\n *       - in: query\n *         name: banned\n *         schema:\n *           type: boolean\n *         description: Filter by banned status\n *       - in: query\n *         name: role\n *         schema:\n *           type: string\n *         description: Filter by admin role\n *       - in: query\n *         name: country\n *         schema:\n *           type: string\n *         description: Filter by country\n *       - in: query\n *         name: search\n *         schema:\n *           type: string\n *         description: Search by username or email\n *     responses:\n *       200:\n *         description: List of users with pagination\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 users:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/User'\n *                 pagination:\n *                   $ref: '#/components/schemas/Pagination'\n *       401:\n *         description: Unauthorized\n *       500:\n *         description: Internal server error\n */\napp.get('/admin/users', adminGuard, async (req, res) => {\n  try {\n    const { page = 1, limit = 20, banned, role, country, search } = req.query;\n    const offset = (Number(page) - 1) * Number(limit);\n\n    let query = supabaseAdmin\n      .from('profiles')\n      .select(`\n        id,\n        username,\n        email,\n        country,\n        state,\n        city,\n        lga,\n        created_at,\n        updated_at,\n        referral_code,\n        is_banned,\n        admin_roles,\n        language_roles\n      `, { count: 'exact' });\n\n    // Apply filters\n    if (banned !== undefined) {\n      query = query.eq('is_banned', banned === 'true');\n    }\n    if (role) {\n      query = query.contains('admin_roles', [role]);\n    }\n    if (country) {\n      query = query.eq('country', country);\n    }\n    if (search) {\n      query = query.or(`username.ilike.%${search}%,email.ilike.%${search}%`);\n    }\n\n    const { data: users, error, count } = await query\n      .range(offset, offset + Number(limit) - 1)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      logger.error({ err: error }, 'Error fetching users');\n      return res.status(500).json({ error: 'Failed to fetch users' });\n    }\n\n    res.json({\n      users: users || [],\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total: count || 0,\n        pages: Math.ceil((count || 0) / Number(limit))\n      }\n    });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/users/{id}:\n *   get:\n *     summary: Get user by ID\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *     responses:\n *       200:\n *         description: User details\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 user:\n *                   $ref: '#/components/schemas/User'\n *       404:\n *         description: User not found\n */\napp.get('/admin/users/:id', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const { data: user, error } = await supabaseAdmin\n      .from('profiles')\n      .select(`\n        id,\n        username,\n        email,\n        country,\n        state,\n        city,\n        lga,\n        created_at,\n        updated_at,\n        referral_code,\n        is_banned,\n        admin_roles,\n        language_roles,\n        referral_count\n      `)\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      logger.error({ err: error }, 'Error fetching user');\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    res.json({ user });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/users/{id}/ban:\n *   post:\n *     summary: Ban a user\n *     description: Ban a user from the platform\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *         description: User ID to ban\n *     requestBody:\n *       required: false\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               reason:\n *                 type: string\n *                 description: Reason for banning the user\n *     responses:\n *       200:\n *         description: User banned successfully\n *       400:\n *         description: User already banned\n *       404:\n *         description: User not found\n *       401:\n *         description: Unauthorized\n *       500:\n *         description: Internal server error\n */\napp.post('/admin/users/:id/ban', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { reason } = req.body;\n\n    const { data: user, error: fetchError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, username, is_banned')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    if (user.is_banned) {\n      return res.status(400).json({ error: 'User is already banned' });\n    }\n\n    const { error: updateError } = await supabaseAdmin\n      .from('profiles')\n      .update({\n        is_banned: true,\n        ban_reason: reason,\n        banned_at: new Date().toISOString()\n      })\n      .eq('id', id);\n\n    if (updateError) {\n      logger.error({ err: updateError }, 'Error banning user');\n      return res.status(500).json({ error: 'Failed to ban user' });\n    }\n\n    // Log admin action\n    await supabaseAdmin\n      .from('admin_actions')\n      .insert({\n        admin_id: (req as any).admin?.sub,\n        action: 'ban_user',\n        target_user_id: id,\n        details: { reason },\n        created_at: new Date().toISOString()\n      });\n\n    res.json({ message: 'User banned successfully' });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id/ban');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/users/{id}/unban:\n *   post:\n *     summary: Unban a user\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *     responses:\n *       200:\n *         description: User unbanned successfully\n *       400:\n *         description: User is not banned\n *       404:\n *         description: User not found\n */\napp.post('/admin/users/:id/unban', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const { data: user, error: fetchError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, username, is_banned')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    if (!user.is_banned) {\n      return res.status(400).json({ error: 'User is not banned' });\n    }\n\n    const { error: updateError } = await supabaseAdmin\n      .from('profiles')\n      .update({\n        is_banned: false,\n        ban_reason: null,\n        banned_at: null\n      })\n      .eq('id', id);\n\n    if (updateError) {\n      logger.error({ err: updateError }, 'Error unbanning user');\n      return res.status(500).json({ error: 'Failed to unban user' });\n    }\n\n    // Log admin action\n    await supabaseAdmin\n      .from('admin_actions')\n      .insert({\n        admin_id: (req as any).admin?.sub,\n        action: 'unban_user',\n        target_user_id: id,\n        details: {},\n        created_at: new Date().toISOString()\n      });\n\n    res.json({ message: 'User unbanned successfully' });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id/unban');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/users/{id}/promote:\n *   post:\n *     summary: Promote user to admin/superadmin\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *     requestBody:\n *       required: false\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               role:\n *                 type: string\n *                 enum: [admin, superadmin]\n *     responses:\n *       200:\n *         description: Promotion successful\n *       400:\n *         description: Invalid role or already has role\n *       404:\n *         description: User not found\n */\napp.post('/admin/users/:id/promote', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { role = 'admin' } = req.body;\n\n    if (!['admin', 'superadmin'].includes(role)) {\n      return res.status(400).json({ error: 'Invalid role. Must be admin or superadmin' });\n    }\n\n    const { data: user, error: fetchError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, username, admin_roles')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    const currentRoles = user.admin_roles || [];\n    if (currentRoles.includes(role)) {\n      return res.status(400).json({ error: `User already has ${role} role` });\n    }\n\n    const { error: updateError } = await supabaseAdmin\n      .from('profiles')\n      .update({\n        admin_roles: [...currentRoles, role]\n      })\n      .eq('id', id);\n\n    if (updateError) {\n      logger.error({ err: updateError }, 'Error promoting user');\n      return res.status(500).json({ error: 'Failed to promote user' });\n    }\n\n    // Log admin action\n    await supabaseAdmin\n      .from('admin_actions')\n      .insert({\n        admin_id: (req as any).admin?.sub,\n        action: 'promote_user',\n        target_user_id: id,\n        details: { role },\n        created_at: new Date().toISOString()\n      });\n\n    res.json({ message: `User promoted to ${role} successfully` });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id/promote');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/users/{id}/demote:\n *   post:\n *     summary: Demote user from admin/superadmin\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *     requestBody:\n *       required: false\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               role:\n *                 type: string\n *                 enum: [admin]\n *     responses:\n *       200:\n *         description: Demotion successful\n *       400:\n *         description: User does not have role\n *       404:\n *         description: User not found\n */\napp.post('/admin/users/:id/demote', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { role = 'admin' } = req.body;\n\n    const { data: user, error: fetchError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, username, admin_roles')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    const currentRoles = user.admin_roles || [];\n    if (!currentRoles.includes(role)) {\n      return res.status(400).json({ error: `User does not have ${role} role` });\n    }\n\n    const { error: updateError } = await supabaseAdmin\n      .from('profiles')\n      .update({\n        admin_roles: currentRoles.filter((r: string) => r !== role)\n      })\n      .eq('id', id);\n\n    if (updateError) {\n      logger.error({ err: updateError }, 'Error demoting user');\n      return res.status(500).json({ error: 'Failed to demote user' });\n    }\n\n    // Log admin action\n    await supabaseAdmin\n      .from('admin_actions')\n      .insert({\n        admin_id: (req as any).admin?.sub,\n        action: 'demote_user',\n        target_user_id: id,\n        details: { role },\n        created_at: new Date().toISOString()\n      });\n\n    res.json({ message: `User demoted from ${role} successfully` });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id/demote');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// ===== LANGUAGE ROLE MANAGEMENT ENDPOINTS =====\n\n/**\n * @swagger\n * /admin/users/{id}/roles/validator:\n *   post:\n *     summary: Grant validator role for a language\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required: [language]\n *             properties:\n *               language:\n *                 type: string\n *     responses:\n *       200:\n *         description: Validator granted\n *       400:\n *         description: Already has role or bad input\n *       404:\n *         description: User not found\n */\napp.post('/admin/users/:id/roles/validator', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { language } = req.body;\n\n    if (!language) {\n      return res.status(400).json({ error: 'Language is required' });\n    }\n\n    const { data: user, error: fetchError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, username, language_roles')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    const currentRoles = user.language_roles || {};\n    if (currentRoles[language]?.includes('validator')) {\n      return res.status(400).json({ error: `User already has validator role for ${language}` });\n    }\n\n    const updatedRoles = {\n      ...currentRoles,\n      [language]: [...(currentRoles[language] || []), 'validator']\n    };\n\n    const { error: updateError } = await supabaseAdmin\n      .from('profiles')\n      .update({ language_roles: updatedRoles })\n      .eq('id', id);\n\n    if (updateError) {\n      logger.error({ err: updateError }, 'Error granting validator role');\n      return res.status(500).json({ error: 'Failed to grant validator role' });\n    }\n\n    // Log admin action\n    await supabaseAdmin\n      .from('admin_actions')\n      .insert({\n        admin_id: (req as any).admin?.sub,\n        action: 'grant_validator_role',\n        target_user_id: id,\n        details: { language },\n        created_at: new Date().toISOString()\n      });\n\n    res.json({ message: `Validator role granted for ${language} successfully` });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id/roles/validator');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/users/{id}/roles/ambassador:\n *   post:\n *     summary: Grant ambassador role for a language\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required: [language]\n *             properties:\n *               language:\n *                 type: string\n *     responses:\n *       200:\n *         description: Ambassador granted\n *       400:\n *         description: Already has role or bad input\n *       404:\n *         description: User not found\n */\napp.post('/admin/users/:id/roles/ambassador', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { language } = req.body;\n\n    if (!language) {\n      return res.status(400).json({ error: 'Language is required' });\n    }\n\n    const { data: user, error: fetchError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, username, language_roles')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    const currentRoles = user.language_roles || {};\n    if (currentRoles[language]?.includes('ambassador')) {\n      return res.status(400).json({ error: `User already has ambassador role for ${language}` });\n    }\n\n    const updatedRoles = {\n      ...currentRoles,\n      [language]: [...(currentRoles[language] || []), 'ambassador']\n    };\n\n    const { error: updateError } = await supabaseAdmin\n      .from('profiles')\n      .update({ language_roles: updatedRoles })\n      .eq('id', id);\n\n    if (updateError) {\n      logger.error({ err: updateError }, 'Error granting ambassador role');\n      return res.status(500).json({ error: 'Failed to grant ambassador role' });\n    }\n\n    // Log admin action\n    await supabaseAdmin\n      .from('admin_actions')\n      .insert({\n        admin_id: (req as any).admin?.sub,\n        action: 'grant_ambassador_role',\n        target_user_id: id,\n        details: { language },\n        created_at: new Date().toISOString()\n      });\n\n    res.json({ message: `Ambassador role granted for ${language} successfully` });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id/roles/ambassador');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/users/{id}/roles/validator:\n *   delete:\n *     summary: Revoke validator role for a language\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required: [language]\n *             properties:\n *               language:\n *                 type: string\n *     responses:\n *       200:\n *         description: Validator revoked\n *       400:\n *         description: User does not have role\n *       404:\n *         description: User not found\n */\napp.delete('/admin/users/:id/roles/validator', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { language } = req.body;\n\n    if (!language) {\n      return res.status(400).json({ error: 'Language is required' });\n    }\n\n    const { data: user, error: fetchError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, username, language_roles')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    const currentRoles = user.language_roles || {};\n    if (!currentRoles[language]?.includes('validator')) {\n      return res.status(400).json({ error: `User does not have validator role for ${language}` });\n    }\n\n    const updatedRoles = {\n      ...currentRoles,\n      [language]: currentRoles[language].filter((role: string) => role !== 'validator')\n    };\n\n    const { error: updateError } = await supabaseAdmin\n      .from('profiles')\n      .update({ language_roles: updatedRoles })\n      .eq('id', id);\n\n    if (updateError) {\n      logger.error({ err: updateError }, 'Error revoking validator role');\n      return res.status(500).json({ error: 'Failed to revoke validator role' });\n    }\n\n    // Log admin action\n    await supabaseAdmin\n      .from('admin_actions')\n      .insert({\n        admin_id: (req as any).admin?.sub,\n        action: 'revoke_validator_role',\n        target_user_id: id,\n        details: { language },\n        created_at: new Date().toISOString()\n      });\n\n    res.json({ message: `Validator role revoked for ${language} successfully` });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id/roles/validator');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/users/{id}/roles/ambassador:\n *   delete:\n *     summary: Revoke ambassador role for a language\n *     tags: [Users]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *           format: uuid\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required: [language]\n *             properties:\n *               language:\n *                 type: string\n *     responses:\n *       200:\n *         description: Ambassador revoked\n *       400:\n *         description: User does not have role\n *       404:\n *         description: User not found\n */\napp.delete('/admin/users/:id/roles/ambassador', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { language } = req.body;\n\n    if (!language) {\n      return res.status(400).json({ error: 'Language is required' });\n    }\n\n    const { data: user, error: fetchError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, username, language_roles')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      return res.status(500).json({ error: 'Failed to fetch user' });\n    }\n\n    const currentRoles = user.language_roles || {};\n    if (!currentRoles[language]?.includes('ambassador')) {\n      return res.status(400).json({ error: `User does not have ambassador role for ${language}` });\n    }\n\n    const updatedRoles = {\n      ...currentRoles,\n      [language]: currentRoles[language].filter((role: string) => role !== 'ambassador')\n    };\n\n    const { error: updateError } = await supabaseAdmin\n      .from('profiles')\n      .update({ language_roles: updatedRoles })\n      .eq('id', id);\n\n    if (updateError) {\n      logger.error({ err: updateError }, 'Error revoking ambassador role');\n      return res.status(500).json({ error: 'Failed to revoke ambassador role' });\n    }\n\n    // Log admin action\n    await supabaseAdmin\n      .from('admin_actions')\n      .insert({\n        admin_id: (req as any).admin?.sub,\n        action: 'revoke_ambassador_role',\n        target_user_id: id,\n        details: { language },\n        created_at: new Date().toISOString()\n      });\n\n    res.json({ message: `Ambassador role revoked for ${language} successfully` });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/users/:id/roles/ambassador');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// ===== STATISTICS ENDPOINTS =====\n\n/**\n * @swagger\n * /admin/stats/overview:\n *   get:\n *     summary: Get platform overview statistics\n *     description: Retrieve general platform statistics including user counts\n *     tags: [Statistics]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Platform overview statistics\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 totalUsers:\n *                   type: integer\n *                   description: Total number of users\n *                 activeUsers:\n *                   type: integer\n *                   description: Number of active (non-banned) users\n *                 bannedUsers:\n *                   type: integer\n *                   description: Number of banned users\n *                 recentUsers:\n *                   type: integer\n *                   description: Number of users created in last 30 days\n *                 timestamp:\n *                   type: string\n *                   format: date-time\n *       401:\n *         description: Unauthorized\n *       500:\n *         description: Internal server error\n */\napp.get('/admin/stats/overview', adminGuard, async (req, res) => {\n  try {\n    const { data: users, error: usersError } = await supabaseAdmin\n      .from('profiles')\n      .select('id, created_at, is_banned', { count: 'exact' });\n\n    if (usersError) {\n      logger.error({ err: usersError }, 'Error fetching user stats');\n      return res.status(500).json({ error: 'Failed to fetch user statistics' });\n    }\n\n    const totalUsers = users?.length || 0;\n    const bannedUsers = users?.filter(u => u.is_banned).length || 0;\n    const activeUsers = totalUsers - bannedUsers;\n\n    // Get users created in last 30 days\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const recentUsers = users?.filter(u => new Date(u.created_at) > thirtyDaysAgo).length || 0;\n\n    res.json({\n      totalUsers,\n      activeUsers,\n      bannedUsers,\n      recentUsers,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/stats/overview');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/stats/languages:\n *   get:\n *     summary: Language rankings\n *     tags: [Statistics]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Ranked list of languages with user counts\n */\napp.get('/admin/stats/languages', adminGuard, async (req, res) => {\n  try {\n    const { data: users, error } = await supabaseAdmin\n      .from('profiles')\n      .select('language_roles');\n\n    if (error) {\n      logger.error({ err: error }, 'Error fetching language stats');\n      return res.status(500).json({ error: 'Failed to fetch language statistics' });\n    }\n\n    const languageCounts: Record<string, number> = {};\n\n    users?.forEach(user => {\n      if (user.language_roles) {\n        Object.keys(user.language_roles).forEach(language => {\n          languageCounts[language] = (languageCounts[language] || 0) + 1;\n        });\n      }\n    });\n\n    const languageRankings = Object.entries(languageCounts)\n      .map(([language, count]) => ({ language, count }))\n      .sort((a, b) => b.count - a.count);\n\n    res.json({\n      rankings: languageRankings,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/stats/languages');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/stats/countries:\n *   get:\n *     summary: Country rankings\n *     tags: [Statistics]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Ranked list of countries with user counts\n */\napp.get('/admin/stats/countries', adminGuard, async (req, res) => {\n  try {\n    const { data: users, error } = await supabaseAdmin\n      .from('profiles')\n      .select('country')\n      .not('country', 'is', null);\n\n    if (error) {\n      logger.error({ err: error }, 'Error fetching country stats');\n      return res.status(500).json({ error: 'Failed to fetch country statistics' });\n    }\n\n    const countryCounts: Record<string, number> = {};\n\n    users?.forEach(user => {\n      if (user.country) {\n        countryCounts[user.country] = (countryCounts[user.country] || 0) + 1;\n      }\n    });\n\n    const countryRankings = Object.entries(countryCounts)\n      .map(([country, count]) => ({ country, count }))\n      .sort((a, b) => b.count - a.count);\n\n    res.json({\n      rankings: countryRankings,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/stats/countries');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/stats/growth:\n *   get:\n *     summary: User growth\n *     tags: [Statistics]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: period\n *         schema:\n *           type: string\n *           enum: [7d, 30d, 90d, 1y]\n *           default: 30d\n *     responses:\n *       200:\n *         description: Daily signup counts\n */\napp.get('/admin/stats/growth', adminGuard, async (req, res) => {\n  try {\n    const { period = '30d' } = req.query;\n\n    let days = 30;\n    if (period === '7d') days = 7;\n    else if (period === '90d') days = 90;\n    else if (period === '1y') days = 365;\n\n    const { data: users, error } = await supabaseAdmin\n      .from('profiles')\n      .select('created_at')\n      .gte('created_at', new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString())\n      .order('created_at', { ascending: true });\n\n    if (error) {\n      logger.error({ err: error }, 'Error fetching growth stats');\n      return res.status(500).json({ error: 'Failed to fetch growth statistics' });\n    }\n\n    // Group by day\n    const dailyGrowth: Record<string, number> = {};\n    users?.forEach(user => {\n      const date = user.created_at.split('T')[0];\n      dailyGrowth[date] = (dailyGrowth[date] || 0) + 1;\n    });\n\n    const growthData = Object.entries(dailyGrowth)\n      .map(([date, count]) => ({ date, count }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n\n    res.json({\n      period,\n      growth: growthData,\n      totalNewUsers: users?.length || 0,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/stats/growth');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// ===== AUDIT ENDPOINTS =====\n\n/**\n * @swagger\n * /admin/waitlist:\n *   get:\n *     summary: List waitlist entries\n *     tags: [System]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: page\n *         schema: { type: integer, default: 1 }\n *       - in: query\n *         name: limit\n *         schema: { type: integer, default: 20 }\n *       - in: query\n *         name: language\n *         schema: { type: string }\n *       - in: query\n *         name: search\n *         schema: { type: string }\n *     responses:\n *       200:\n *         description: Paginated waitlist entries\n */\napp.get('/admin/waitlist', adminGuard, async (req, res) => {\n  try {\n    const { page = 1, limit = 20, language, search } = req.query as any;\n    const offset = (Number(page) - 1) * Number(limit);\n\n    let query = supabaseAdmin\n      .from('waitlist')\n      .select('id, email, phone_number, language, created_at', { count: 'exact' })\n      .order('created_at', { ascending: false });\n\n    if (language) query = query.eq('language', language);\n    if (search) query = query.or(`email.ilike.%${search}%,phone_number.ilike.%${search}%`);\n\n    const { data, error, count } = await query.range(offset, offset + Number(limit) - 1);\n    if (error) {\n      logger.error({ err: error }, 'Error fetching waitlist');\n      return res.status(500).json({ error: 'Failed to fetch waitlist' });\n    }\n\n    res.json({\n      entries: data || [],\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total: count || 0,\n        pages: Math.ceil((count || 0) / Number(limit))\n      }\n    });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/waitlist');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/waitlist/export:\n *   get:\n *     summary: Export waitlist as CSV\n *     tags: [System]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: CSV export\n *         content:\n *           text/csv:\n *             schema:\n *               type: string\n */\napp.get('/admin/waitlist/export', adminGuard, async (_req, res) => {\n  try {\n    const { data, error } = await supabaseAdmin\n      .from('waitlist')\n      .select('email, phone_number, language, created_at')\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      logger.error({ err: error }, 'Error exporting waitlist');\n      return res.status(500).json({ error: 'Failed to export waitlist' });\n    }\n\n    const header = 'email,phone_number,language,created_at\\n';\n    const rows = (data || []).map(r => [r.email, r.phone_number, r.language, r.created_at].join(','));\n    const csv = header + rows.join('\\n');\n\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', 'attachment; filename=\"waitlist.csv\"');\n    res.send(csv);\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/waitlist/export');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/audit/actions:\n *   get:\n *     summary: List admin actions\n *     tags: [Audit]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: page\n *         schema: { type: integer, default: 1 }\n *       - in: query\n *         name: limit\n *         schema: { type: integer, default: 50 }\n *       - in: query\n *         name: admin_id\n *         schema: { type: string, format: uuid }\n *       - in: query\n *         name: action\n *         schema: { type: string }\n *     responses:\n *       200:\n *         description: Paginated admin actions\n */\napp.get('/admin/audit/actions', adminGuard, async (req, res) => {\n  try {\n    const { page = 1, limit = 50, admin_id, action } = req.query;\n    const offset = (Number(page) - 1) * Number(limit);\n\n    let query = supabaseAdmin\n      .from('admin_actions')\n      .select(`\n        id,\n        admin_id,\n        action,\n        target_user_id,\n        details,\n        created_at\n      `, { count: 'exact' });\n\n    if (admin_id) {\n      query = query.eq('admin_id', admin_id);\n    }\n    if (action) {\n      query = query.eq('action', action);\n    }\n\n    const { data: actions, error, count } = await query\n      .range(offset, offset + Number(limit) - 1)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      logger.error({ err: error }, 'Error fetching admin actions');\n      return res.status(500).json({ error: 'Failed to fetch admin actions' });\n    }\n\n    res.json({\n      actions: actions || [],\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total: count || 0,\n        pages: Math.ceil((count || 0) / Number(limit))\n      }\n    });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/audit/actions');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n/**\n * @swagger\n * /admin/audit/user/{id}:\n *   get:\n *     summary: Audit trail for a user\n *     tags: [Audit]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema: { type: string, format: uuid }\n *       - in: query\n *         name: page\n *         schema: { type: integer, default: 1 }\n *       - in: query\n *         name: limit\n *         schema: { type: integer, default: 50 }\n *     responses:\n *       200:\n *         description: Paginated audit actions for target user\n */\napp.get('/admin/audit/user/:id', adminGuard, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { page = 1, limit = 50 } = req.query;\n    const offset = (Number(page) - 1) * Number(limit);\n\n    const { data: actions, error, count } = await supabaseAdmin\n      .from('admin_actions')\n      .select(`\n        id,\n        admin_id,\n        action,\n        details,\n        created_at\n      `, { count: 'exact' })\n      .eq('target_user_id', id)\n      .range(offset, offset + Number(limit) - 1)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      logger.error({ err: error }, 'Error fetching user audit trail');\n      return res.status(500).json({ error: 'Failed to fetch user audit trail' });\n    }\n\n    res.json({\n      actions: actions || [],\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total: count || 0,\n        pages: Math.ceil((count || 0) / Number(limit))\n      }\n    });\n  } catch (error) {\n    logger.error({ err: error }, 'Unexpected error in /admin/audit/user/:id');\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Example protected route (keeping original for reference)\napp.get('/admin/overview', adminGuard, async (_req, res) => {\n  try {\n    // Simple sanity stats (can switch to MVs later)\n    const { count: usersCount } = await supabaseAdmin.from('profiles').select('id', { count: 'exact', head: true });\n    res.json({ usersCount: usersCount ?? 0 });\n  } catch (e) {\n    res.status(500).json({ error: 'Failed to load overview' });\n  }\n});\n\n// Start\napp.listen(PORT, () => {\n  logger.info({ port: PORT }, 'Admin API listening');\n});\n"],"mappings":"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","names":[]}